
    model{  
  # -------------------------------------------------
  # Parameters:
  # s: monthly survival probability intercept
  # tagfail: probability that tag will fail
  # p.dead: probability for carcass to be recovered
  # p.tagfail: probability of observing a tag failure
  # -------------------------------------------------
  # States (S):
  # 1 alive with functioning tag
  # 2 alive, tag failed or lost
  # 3 dead with functioning tag
  # 4 dead, tag failed or lost
  # 5 long dead
  
  # Observations (O):
  # 1 Observed alive, tag works 
  # 2 Observed alive, tag failed
  # 3 Observed dead, tag works
  # 4 Observed dead, tag failed- NO OCCURRENCES
  # 5 Not observed, uncertain tag status and fate
  # -------------------------------------------------
  # Priors and constraints
  for (xx in 1:3){
    mean.s[xx] ~ dbeta(1, 1)   # uninformative prior for all MONTHLY survival probabilities
    l.s[xx] <- logit(mean.s[xx])
  }# xx logit transformed survival intercept
  # mean.s ~ dbeta(1, 1)   # uninformative prior for all MONTHLY survival probabilities
  # l.s <- logit(mean.s)
  mean.tagfail ~ dbeta(1, 1)   # uninformative prior for all MONTHLY survival probabilities
  l.tagfail <- logit(mean.tagfail)    # logit transformed survival intercept
  mean.p.tagfail ~ dbeta(1, 1)   # uninformative prior for all MONTHLY survival probabilities
  l.p.tagfail <- logit(mean.p.tagfail)    # logit transformed survival intercept
  mean.p.dead ~ dbeta(1, 1)   # uninformative prior for all MONTHLY survival probabilities
  l.p.dead <- logit(mean.p.dead)    # logit transformed survival intercept

  delta1 ~ dnorm(0, 1/(10*10) ) # covariates for survival        
  delta2 ~ dnorm(0, 1/(10*10) ) # covariates for survival
  beta1 ~ dnorm(0, 1/(10*10) ) # covariates for tagloss      
  beta2 ~ dnorm(0, 1/(10*10) ) # covariates for tagloss
  
  for (yr in 1:(nyears)){
    eps.s[yr] ~ dnorm(0, 1/(sigma.s*sigma.s) )
  }
  sigma.s ~ dexp(1)           
  #pi[1,] simulates values but is unused in model, model uses data
  alpha[1:6] <- c(1,1,1,1,1,1)
  pi[1,1:6] ~ ddirch(alpha[1:6])
  # pi[2,] estimates age for unknown age subadults
  pi[2,1] <- 0
  pi[2,2:5] ~ ddirch(alpha[2:5])
  pi[2,6] <- 0
  
  #### MONTHLY SURVIVAL PROBABILITY
  for (i in 1:nind){
   first_age[i] ~ dcat( pi[ known[i], 1:6] )
    for (t in f[i]:ntime){
      age[i,t] <- ( first_age[i] + t/12 - f[i]/12 )
      age.class[i,t] <- ifelse(age[i,t]<1, 1, ifelse(age[i,t]>=6, 3, 2 )  )  # translate to age classes: 0 yro first-year, 1-5 yro subadult, and >=6 yro adult
      logit(s[i,t]) <- l.s[ age.class[i,t] ] + 
                        delta1*managed.cat[i,t] + 
                        #delta1*year.cont[t] +
                        delta2*rehabbed[i] + eps.s[ year.factor[t] ]
      #logit(s[i,t]) <- l.s[ ageclass[i,t] ] + delta1*managed.cont[t] + 
      #                  + delta2*rehabbed[i] + eps.s[year[t]]
      logit(tagfailed[i,t]) <- l.tagfail + beta1*tag.age.sc[i,t] + beta2*tag.age.sc[i,t]^2 
      logit(p.tagfailed[i,t]) <- l.p.tagfail 
      logit(p.dead[i,t]) <- l.p.dead #### probability of dead recovery
    } #t
  } #i
  
  # -------------------------------------------------
  # Define state-transition and observation matrices 
  # -------------------------------------------------
  for (i in 1:nind){
    for (t in f[i]:(ntime-1)){
      # Define probabilities of state S(t+1) [last dim] given S(t) [first dim]
      ps[1,i,t,1]<-(1-tagfailed[i,t])*s[i,t]    ## dead birds stay dead
      ps[1,i,t,2]<-tagfailed[i,t]*s[i,t]
      ps[1,i,t,3]<-(1-tagfailed[i,t])*(1-s[i,t])
      ps[1,i,t,4]<-tagfailed[i,t]*(1-s[i,t])
      ps[1,i,t,5]<-0
      
      ps[2,i,t,1]<-0
      ps[2,i,t,2]<-s[i,t]
      ps[2,i,t,3]<-0
      ps[2,i,t,4]<-(1-s[i,t])
      ps[2,i,t,5]<-0
      
      ps[3,i,t,1]<-0
      ps[3,i,t,2]<-0
      ps[3,i,t,3]<-0
      ps[3,i,t,4]<-0
      ps[3,i,t,5]<-1
      
      ps[4,i,t,1]<-0
      ps[4,i,t,2]<-0
      ps[4,i,t,3]<-0
      ps[4,i,t,4]<-0
      ps[4,i,t,5]<-1
      
      ps[5,i,t,1]<-0
      ps[5,i,t,2]<-0
      ps[5,i,t,3]<-0
      ps[5,i,t,4]<-0
      ps[5,i,t,5]<-1
      
      # Define probabilities of O(t) [last dim] given S(t)  [first dim]
      po[1,i,t,1]<-1
      po[1,i,t,2]<-0
      po[1,i,t,3]<-0
      po[1,i,t,4]<-0
      po[1,i,t,5]<-0
      
      po[2,i,t,1]<-0
      po[2,i,t,2]<-p.tagfailed[i,t]
      po[2,i,t,3]<-0
      po[2,i,t,4]<-0
      po[2,i,t,5]<-(1-p.tagfailed[i,t])
      
      po[3,i,t,1]<-0
      po[3,i,t,2]<-0
      po[3,i,t,3]<-p.dead[i,t]
      po[3,i,t,4]<-0
      po[3,i,t,5]<-(1-p.dead[i,t])
      
      po[4,i,t,1]<-0
      po[4,i,t,2]<-0
      po[4,i,t,3]<-0
      po[4,i,t,4]<-p.tagfailed[i,t]*p.dead[i,t]
      po[4,i,t,5]<-(1-p.tagfailed[i,t])*(1-p.dead[i,t])
      
      po[5,i,t,1]<-0
      po[5,i,t,2]<-0
      po[5,i,t,3]<-0
      po[5,i,t,4]<-0
      po[5,i,t,5]<-1
      
    } #t
  } #i
  
  # Likelihood 
  for (i in 1:nind){
    # Define latent state at first capture
    z[i,f[i]] <- first_zs[i] ## alive with tag when first marked
    for (t in (f[i]+1):ntime){
      # State process: draw S(t) given S(t-1)
      z[i,t] ~ dcat(ps[z[i,t-1], i, t-1, 1:5])
      # Observation process: draw O(t) given S(t)
      y[i,t] ~ dcat(po[z[i,t], i, t-1,1:5])
    } #t
  } #i
} #model

